# 非开发环境使用的Dockerfile
#
# 和开发环境的主要区别在于：
# 1）这里的构建在容器内部进行，和宿主机环境设置隔离
# 2）构建出的容器使用distroless镜像，镜像更精简更安全
#
# 关于distroless，参见：
# https://github.com/GoogleContainerTools/distroless/tree/master/java
# https://console.cloud.google.com/gcr/images/distroless/java
#
# 为减少构建出的最终镜像的大小，我们使用multi-stage，分成build stage和runtime stage
# 两个stage。build stage构建出得jar会被复制到runtime stage里。

# 1. stage: build --------------------------------------------------------------
FROM maven:3.6.3-jdk-11 as builder

WORKDIR /workspace

# 先把maven pom.xml复制进来，没有源代码的情况下就构建，这样的话，源代码的修改不会导致
# 容器内的maven仓库缓存失效，从而减少构建时间
COPY pom.xml ./

# 没有源代码的情况下就构建：下载依赖库
# 参见 https://issues.apache.org/jira/browse/MDEP-516
RUN mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -e

# 复制源代码，真正构建
COPY src /workspace/
RUN mvn package -e

# 2. stage: runtime ------------------------------------------------------------
# FROM gcr.io/distroless/java@sha256:40671acefa51d12e33f547fc4950b6de430c905e61ca821d9c16ab5133ede762
# FROM gcr.io/distroless/java:11-nonroot
# TODO: 切换到distroless
FROM openjdk:11.0.9.1-jre

WORKDIR /opt
EXPOSE 8080

COPY --from=builder /workspace/app/target/*.jar ./app.jar

ENV SPRING_PROFILES_ACTIVE production

ENTRYPOINT []

CMD [\
    "java", \
    "-Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-jar", "app.jar" \
]
